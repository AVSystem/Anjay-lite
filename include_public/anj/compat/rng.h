/*
 * Copyright 2023-2025 AVSystem <avsystem@avsystem.com>
 * AVSystem Anjay Lite LwM2M SDK
 * All rights reserved.
 *
 * Licensed under AVSystem Anjay Lite LwM2M Client SDK - Non-Commercial License.
 * See the attached LICENSE file for details.
 */

#include <anj/init.h>

/**
 * @file
 * @brief Platform hook for providing randomness.
 *
 * This header declares a minimal API that platform integrators must implement
 * to provide entropy to Anjay Lite. It defines:
 * - @ref anj_rng_generate - generate random bytes
 *
 * The implementation may wrap a TRNG, OS CSRNG service, or any other
 * platform-specific entropy source. Quality of generated data directly
 * impacts security features that depend on randomness.
 */

#ifndef ANJ_RNG_H
#    define ANJ_RNG_H

#    include <stddef.h>
#    include <stdint.h>

#    ifdef __cplusplus
extern "C" {
#    endif

/**
 * Generates random bytes and fills @p buffer with them.
 *
 * Implementation has to be provided by the application and is used by the
 * library wherever randomness is needed. It is also an entropy source for
 * crypto libraries when default integrations are used (e.g. @ref
 * ANJ_WITH_MBEDTLS).
 *
 * When using a library with secure connections, a cryptographically secure
 * random number generator (CSRNG) is required. Recommended RNG sources in this
 * case include:
 *  - The operating system's CSRNG (e.g. Linux @c getrandom())
 *  - For embedded/bare-metal systems:
 *    - (a) A hardware TRNG, if it provides sufficient throughput, or
 *    - (b) A DRBG, such as NIST SP 800-90A DRBG: CTR_DRBG, MAC_DRBG, or
 *      Hash_DRBG seeded by a TRNG
 *
 * @warning The library assumes this function returns cryptographically secure
 *          bytes whenever security features are enabled. If an application
 *          supplies a weaker generator, overall security is undefined.
 *
 * For case with non-secure connections, any general-purpose PRNG is acceptable.
 *
 * @param[out] buffer   Pointer to the buffer where generated bytes will be
 *                      stored.
 * @param      size     Number of bytes to generate and write to @p out.
 *
 * @return 0 on success, or non-zero error code on failure.
 */
int anj_rng_generate(uint8_t *buffer, size_t size);

#    ifdef __cplusplus
}
#    endif

#endif // ANJ_RNG_H
